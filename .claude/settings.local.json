{
  "permissions": {
    "allow": [
      "Bash(git add:*)",
      "Bash(mkdir:*)",
      "Bash(chmod:*)",
      "Bash(uv run pytest:*)",
      "Bash(gh issue list:*)",
      "Bash(uv run ruff:*)",
      "Bash(uv run:*)",
      "Bash(find:*)",
      "Bash(for f in /Users/user/dev/create-project/create_project/templates/builtin/*.yaml)",
      "Bash(do echo \"=== $f ===\")",
      "Bash(grep:*)",
      "Bash(done)",
      "Bash(echo)",
      "Bash(mv:*)",
      "Bash(for f in /Users/user/dev/create-project/create_project/templates/builtin/template_files/cli_single/*.py)",
      "Bash(do mv \"$f\" \"$f.j2\")",
      "Bash(for f in /Users/user/dev/create-project/create_project/templates/builtin/template_files/script/*.py)",
      "Bash(git commit:*)",
      "Bash(git checkout:*)",
      "Bash(QT_QPA_PLATFORM=offscreen uv run pytest tests/gui/test_basic_info_step.py -v)",
      "Bash(QT_QPA_PLATFORM=offscreen uv run python -c \"\nimport re\npattern = r''^[a-zA-Z_][a-zA-Z0-9_]*$''\ntest_names = [''123project'', ''valid_name'', ''my-project'']\nfor name in test_names:\n    print(f''{name}: {bool(re.match(pattern, name))}'')\")",
      "Bash(QT_QPA_PLATFORM=offscreen uv run pytest tests/gui/test_basic_info_step.py::test_project_name_validation_invalid -v -s)",
      "Bash(QT_QPA_PLATFORM=offscreen uv run pytest tests/gui/ -v)",
      "Bash(git push:*)",
      "Bash(gh pr create:*)",
      "Bash(QT_QPA_PLATFORM=offscreen uv run pytest tests/gui/test_location_step.py -v)",
      "Bash(QT_QPA_PLATFORM=offscreen uv run pytest tests/gui/test_custom_widgets.py -v)",
      "Bash(gh issue comment:*)",
      "Bash(QT_QPA_PLATFORM=offscreen uv run pytest tests/gui/test_settings_dialog.py -xvs)",
      "Bash(QT_QPA_PLATFORM=offscreen uv run pytest tests/gui/test_settings_dialog.py::TestSettingsDialog::test_validation_invalid_url -xvs)",
      "Bash(QT_QPA_PLATFORM=offscreen uv run pytest tests/gui/test_settings_dialog.py::TestSettingsDialog::test_cancel_button -xvs)",
      "Bash(QT_QPA_PLATFORM=offscreen uv run pytest tests/gui/test_settings_dialog.py -v)",
      "mcp__memory__retrieve_memory",
      "mcp__memory__store_memory",
      "Bash(ls:*)",
      "Bash(pkill:*)",
      "Bash(git merge:*)",
      "Bash(git branch:*)",
      "mcp__memory__recall_memory",
      "Bash(for file in create_project/templates/builtin/*.yaml)",
      "Bash(do)",
      "Bash(echo:*)",
      "Bash(awk:*)",
      "mcp__memory__search_by_tag",
      "Bash(uv add:*)",
      "Bash(rm:*)"
    ],
    "deny": []
  }
}