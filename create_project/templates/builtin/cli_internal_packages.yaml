# ABOUTME: Built-in template for complex CLI applications with internal packages
# ABOUTME: Multi-module CLI applications with sophisticated architecture

schema_version: "1.0.0"

metadata:
  name: "CLI Application with Internal Packages"
  description: "Complex CLI application with multiple internal packages and modules"
  version: "1.0.0"
  category: "CLI"
  tags: ["cli", "complex", "modular", "packages", "enterprise"]
  author: "Create Project Team"
  created: "2025-07-21T16:43:00Z"
  template_id: "builtin_cli_internal_packages"

variables:
  - name: "project_name"
    type: "string"
    description: "Name of the CLI application"
    required: true
    validation:
      pattern: "^[a-zA-Z][a-zA-Z0-9_-]*$"
      min_length: 2
      max_length: 50

  - name: "author"
    type: "string"
    description: "Application author name"
    required: true
    default: "Your Name"

  - name: "email"
    type: "email"
    description: "Author email address"
    required: false
    default: ""

  - name: "description"
    type: "string"
    description: "Brief description of the CLI application"
    required: true
    default: "A complex command-line application"
    validation:
      min_length: 10
      max_length: 200

  - name: "license"
    type: "choice"
    description: "License for the application"
    required: true
    default: "MIT"
    choices: ["MIT", "Apache-2.0", "GPL-3.0", "BSD-3-Clause"]

  - name: "python_version"
    type: "choice"
    description: "Minimum Python version required"
    required: true
    default: "3.9.6"
    choices: ["3.9.6", "3.10.0", "3.11.0", "3.12.0"]

  - name: "include_docs"
    type: "boolean"
    description: "Include documentation directory"
    required: false
    default: true

  - name: "include_data"
    type: "boolean"
    description: "Include data directory"
    required: false
    default: true

  - name: "modules"
    type: "list"
    description: "List of internal modules to create"
    required: false
    default: ["core", "utils"]
    validation:
      min_items: 1
      max_items: 10

structure:
  root_directory:
      name: "{{project_name}}"
    files:
    - name: "pyproject.toml"
      template_file: "common/pyproject.toml"
    - name: "README.md"
      template_file: "common/readme.md"
    - name: ".gitignore"
      template_file: "common/gitignore.txt"
    - name: "LICENSE"
      content: "{{ license_text }}"

    directories:
    - name: "bin"
      files:
        - name: "{{project_name}}"
          content: |
            #!/usr/bin/env python3
            """Entry point script for {{project_name}}."""
            import sys
            from {{project_name}}.runner import main
            
            if __name__ == "__main__":
                sys.exit(main())
          permissions: "755"

    - name: "{{project_name}}"
      files:
        - name: "__init__.py"
          content: |
            """{{description}}"""
            __version__ = "0.1.0"
            __author__ = "{{author}}"
        - name: "runner.py"
          content: |
            """Main runner for {{project_name}} CLI application."""
            import click
            from . import __version__
            
            @click.group()
            @click.version_option(version=__version__)
            def main():
                """{{description}}"""
                pass
            
            if __name__ == "__main__":
                main()
      directories:
        {% for module in modules %}
        - name: "{{module}}"
          files:
            - name: "__init__.py"
              content: |
                """{{module}} module for {{project_name}}."""
            - name: "{{module}}.py"
              content: |
                """Core functionality for {{module}} module."""
                
                def process():
                    """Process {{module}} functionality."""
                    pass
        {% endfor %}

    - name: "tests"
      files:
        - name: "__init__.py"
          content: ""
      directories:
        {% for module in modules %}
        - name: "{{module}}"
          files:
            - name: "__init__.py"
              content: ""
            - name: "test_{{module}}.py"
              content: |
                """Tests for {{module}} module."""
                import pytest
                from {{project_name}}.{{module}} import {{module}}
                
                def test_{{module}}_process():
                    """Test {{module}} processing."""
                    assert True  # Replace with actual tests
        {% endfor %}

    - name: "docs"
      condition: "{{ include_docs }}"
      files:
        - name: "README.md"
          content: |
            # {{project_name}} Documentation
            
            ## Overview
            {{description}}
            
            ## Installation
            ```bash
            pip install {{project_name}}
            ```
            
            ## Usage
            ```bash
            {{project_name}} --help
            ```

    - name: "data"
      condition: "{{ include_data }}"
      files:
        - name: ".gitkeep"
          content: ""

template_files:
  files:
    - name: "common/pyproject.toml"
    - name: "common/readme.md"
    - name: "common/gitignore.txt"

hooks:
  post_generation:
    - type: "git"
      command: "init"
      condition: "{{ init_git | default(true) }}"
    - type: "python"
      command: "-m venv venv"
      condition: "{{ create_venv | default(true) }}"

compatibility:
  min_python_version: "{{python_version}}"
  supported_os: ["macOS", "Linux", "Windows"]
  dependencies: ["click>=8.0.0"]